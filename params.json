{"name":"Congo","tagline":"Simple Go console package","body":"# Congo\r\n\r\nCongo is a dead simple console Go package that mimic net/http server API to provide a simple way to add a console to your applications.\r\n\r\nDocumentation at [http://godoc.org/github.com/uraimo/congo](http://godoc.org/github.com/uraimo/congo)\r\n\r\nInstallation\r\n------------\r\n\r\n\tgo get github.com/uraimo/congo\r\n\r\nUsage\r\n-----\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/uraimo/congo\"\r\n)\r\n\r\n\r\nfunc readit(args []string){\r\n\tfmt.Println(\"ls called with args:\", args)\r\n}\r\n\r\nfunc err(cmd string){\r\n\tfmt.Println(\"Unknown command\", cmd)\r\n}\r\n\r\nfunc main(){\r\n  t :=congo.NewTerm(\"localhost>\")\r\n  t.AddCommand(\"ls\",readit)\r\n  t.AddUnknownHandler(err)\r\n  t.ListenUntilExit()\r\n} \r\n```\r\n\r\nTODO\r\n----\r\n+ Configurable exit command/s\r\n+ History support\r\n+ Configurable autocomplete\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}